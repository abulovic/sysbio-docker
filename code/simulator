#!/usr/bin/env python
import os
import sys
import json
import roadrunner
from argparse import ArgumentParser
from datetime import datetime as dtime

_default_cfg = '''
{
	"integration": {},
	"plotting": {
		"timecourse": {
			"plot-all": true,
			"plot-groups": false
		}
	}
}
'''

class TimecoursePlot(object):
	def __init__(self, title, cfg):
		self.title = title
		self.species = cfg['species']

class Config(object):

	def __init__(self, fname, model):
		if fname is None:
			_json_str = _default_cfg
		else:
			with open(fname) as fin:
				_json_str = ''.join(fin.readlines())
		self._load_cfg(_json_str)
		self.model = model

	def _load_cfg(self, json_str):
		self._opts = json.loads(json_str)
		if self._opts['plotting']['timecourse']['plot-all']:
			species = [str(val) for val in self.model.getStateVectorIds()]
			self._opts['plotting']['timecourse']['groups']['All species'] = {"species": species}

		self.species = self.get_species_list()


	def get_sim_options(self):
		return self._opts['integration']

	def get_species_list(self):
		if self._opts['plotting']['timecourse']['plot-all']:
			selection = self.model.getStateVectorIds()
		elif self._opts['plotting']['timecourse']['plot-groups']:
			selection = []
			for gid, gval in self._opts['plotting']['timecourse']['groups'].iteritems():
				selection.extend(gval['species'])
		return ['time'] + [str(val) for val in selection]

	def get_timecourse_plots(self):
		return self._opts['plotting']['timecourse']['groups'].items()


def get_parser():
	parser = ArgumentParser()
	parser.add_argument("MODEL", help="SBML xml file containing the model")
	parser.add_argument("--cfg", help="Json file containing the simulation and output configuration")
	parser.add_argument("--odir", help="Output directory where simulation results will be saved", default='.')
	return parser

def get_timecourse(result, name):
	return result[:, name.index(name)]

def export_sim(cfg, result, out_dir):
	model_dir = os.path.sep.join([out_dir, cfg.model.getModelName()])
	if not os.path.isdir(model_dir):
		os.makedirs(model_dir)
	now = dtime.isoformat(dtime.now())
	cpath = os.path.sep.join([model_dir, now])
	os.makedirs(cpath)

	for name, opts in cfg.get_timecourse_plots():
		with open(os.path.sep.join([cpath, '%s.txt' % name]), 'w') as fout:
			species = ['time'] + opts["species"]
			for sp in species:
				res = get_timecourse(result, sp)
				fout.write('%s,%s\n' % (sp, ';'.join([str(val) for val in res])))



def main():
	parser = get_parser()
	args = parser.parse_args()

	model_file = args.MODEL
	rr = roadrunner.RoadRunner(model_file)

	cfg = Config(args.cfg, rr.getModel())
	sim_opts = cfg.get_sim_options()
	sim_opts['selections'] = cfg.species

	result = rr.simulate(**cfg.get_sim_options())

	export_sim(cfg, result, args.odir)
	




if __name__ == '__main__':
	main()