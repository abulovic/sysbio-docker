#! /usr/bin/env python
import os
import sys
import json
import shutil
from argparse import ArgumentParser
from datetime import datetime as dtime

import roadrunner
import tellurium as te

_default_cfg = '''
{
	"integration": {
		"stiff": true
	},
	"plotting": {
		"timecourse": {
			"plot-all": true,
			"plot-groups": false
		}
	}
}
'''

class Config(object):

	def __init__(self, fname, model):
		if not fname:
			_json_str = _default_cfg
		else:
			with open(fname) as fin:
				_json_str = ''.join(fin.readlines())
		self.model = model
		self._load_cfg(_json_str)

	def _load_cfg(self, json_str):
		self._opts = json.loads(json_str)
		if self._opts['plotting']['timecourse']['plot-all']:
			species = [str(val) for val in self.model.getStateVectorIds()]
			if 'groups' not in self._opts['plotting']['timecourse']:
				self._opts['plotting']['timecourse']['groups'] = {}
			self._opts['plotting']['timecourse']['groups']['All_species'] = {"species": species}

		self.species = self.get_species_list()


	def get_sim_options(self):
		return self._opts['integration']

	def get_species_list(self):
		if self._opts['plotting']['timecourse']['plot-all']:
			selection = self.model.getStateVectorIds()
		elif self._opts['plotting']['timecourse']['plot-groups']:
			selection = []
			for gid, gval in self._opts['plotting']['timecourse']['groups'].items():
				selection.extend(gval['species'])
		return ['time'] + [str(val) for val in selection]

	def get_timecourse_plots(self):
		return self._opts['plotting']['timecourse']['groups']


def get_parser():
	parser = ArgumentParser()
	parser.add_argument('action', choices=('sim', 'list-plots'))
	return parser

def get_timecourse(result, species, name):
	return result[:, species.index(name)]

def export_sim(cfg, result, out_dir):
	for name, opts in cfg.get_timecourse_plots().items():
		with open(os.path.sep.join([out_dir, '%s.txt' % name]), 'w') as fout:
			species = ['time'] + opts["species"]
			for sp in species:
				res = get_timecourse(result, species, sp)
				fout.write('%s;%s\n' % (sp, ';'.join([str(val) for val in res])))


def _is_int(_str):
	try:
		int(_str)
		return True
	except Exception, e:
		return False


def create_directory_structure(mfile, cfile, cfg):
	mname = cfg.model.getModelName().replace(' ', '_')
	topdir = '/data/%s' % mname
	if not os.path.isdir(topdir):
		os.makedirs(topdir)
	simdirs = map(lambda f: int(f), filter(lambda f: _is_int(f), os.listdir(topdir)))
	simdirs.append(0)
	new_simdir = max(simdirs) + 1

	abs_simdir = '%s/%d' % (topdir, new_simdir)
	os.makedirs(abs_simdir)

	shutil.copy(mfile, abs_simdir)
	if cfile:
		shutil.copy(cfile, abs_simdir)

	return abs_simdir

def simulate():
	with open('/data/models/latest') as fin:
		model_name = fin.readline().strip()
	sbml_file = '/data/models/%(mname)s.xml' % {'mname': model_name}
	ant_file = '/data/models/%(mname)s.txt' % {'mname': model_name}
	cfg_file = '/data/models/%(mname)s.cfg' % {'mname': model_name}

	if os.path.isfile(sbml_file):
		model_file = sbml_file
		rr = roadrunner.RoadRunner(model_file)
	elif os.path.isfile(ant_file):
		model_file = ant_file
		with open(ant_file) as fin:
			rr = te.loada(fin.read())

	if not os.path.isfile(cfg_file):
		cfg_file = None
	cfg = Config(cfg_file, rr.getModel())

	sim_opts = cfg.get_sim_options()
	sim_opts['selections'] = cfg.species

	result = rr.simulate(**cfg.get_sim_options())

	outdir = create_directory_structure(model_file, cfg_file, cfg)

	export_sim(cfg, result, outdir)

	print outdir

def list_plots():
	with open('/data/models/latest') as fin:
		model_name = fin.readline().strip()
	sbml_file = '/data/models/%(mname)s.xml' % {'mname': model_name}
	ant_file = '/data/models/%(mname)s.txt' % {'mname': model_name}
	cfg_file = '/data/models/%(mname)s.cfg' % {'mname': model_name}

	if os.path.isfile(sbml_file):
		model_file = sbml_file
		rr = roadrunner.RoadRunner(model_file)
	elif os.path.isfile(ant_file):
		model_file = ant_file
		with open(ant_file) as fin:
			rr = te.loada(fin.read())

	if not os.path.isfile(cfg_file):
		cfg_file = None
	cfg = Config(cfg_file, rr.getModel())

	print ' '.join(cfg.get_timecourse_plots().keys())


def main():

	parser = get_parser()
	args = parser.parse_args()

	if args.action == 'sim':
		simulate()

	elif args.action == 'list-plots':
		list_plots()


	


if __name__ == '__main__':
	main()